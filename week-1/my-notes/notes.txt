7/7/2025

Services
- Service Oriented Architecture - "microservices"
- definition: code that owns and is responsible for some data in your organization, and all the code that manages that data.

Monolithic Applications
- one repository
- code is all in one place
- generally the easiest to develop (in aspects where backend services aren't needed)
    - ex. databases, api's, libraries (these are also backend/backing services)
- If one part of the application ships 'bad code' to the whole application, then the whole application fails

Application Developers
- don't get paid to write code exactly
- get paid to deliver software

A Service somehwat exposes an HTTP Interface (Web APIs/REST APIs/"REST"ful APIs)
Hide technical components/processes from front facing applications and make it as easy and intuitive as possible for the end user

.NET - Open Source / Cross Platform:
- Runtime 
    - CLR (Common Language Runtime)
    - is OS and Processor Architecture specific
    - a program that runs other programs
- Language (C#, VB.NET, C++ with managed extensions, F#) etc.
- Framework

JVM = Java ... CLR = .NET

ByteCode in Java - Intermediate Langauge (IL)

.NET "Assembly" is similar to a jar in Java
- the Assembly is what is created in Visual Studio or any other C# .NET application
- taking a bunch of source code files and create one or more assemblies from them
- In Visual Studio, a 'Project' === 'Assembly'
    - Visual Studio also has the idea of a "Solution," which is a workspace for one or more projects

Slowest thing in a process is I/O (calling other backing services, databases, other APIs, etc.)

npx gitpick -o JeffryGonzalez/intro-to-programming-july-2025/tree/main/week-1-instructor

7/8/2025

Application Development
- "Applying Frameworks, Libraries, Systems, to build SPECIFIC things."
- Prioritize Frequent Iteration
    - Get stuff out quickly
    - Experiment

Libraries/Frameworks (Shared Code)
- coreui
- Library is code your code uses
    - Stuff we could write, but use this an expedient
- Framework is code that uses your code
    - provide functionality for a specific domain of usage
    - Server-side web applications in .NET use ASP.NET (Framework)
    - OO - they provide base classes that we extend.

Systems Programming
- Network Protocols, Database Engines, Compilers, Operating Systems, etc.

Entities: List of things that each have some unique identifier
- Like a list of employees
- EntityFramework

Four Rules of Simple Design:
- Passes the tests (it works)
    - Permission to write trash code
- Reveals intention
    - You and others can read this and understand what it is doing
- No duplication
    - "wastes time" - "we paid you already to write that"
    - RIGHT but middle school asnwer - "if you change it one place you have to change it everywhere"
    - Create a "concept" for a business or technical requirement, and that "concept" owns that data and the process around that data
- Fewest elements

System Tests 
- do our best to write some tests that demonstrate the current capabilities of our System

Environments 
- the places your code runs during its life

Deployments 
- your code in an environment

Configuration = the set of "things" that change based on environment

7/9/2025

Unit Testing
- Low level tests that test isolated units of code outside of the context of how they will be used.

Test-First (TDD)
- can be used with unit testing, system testing, or system integration testing
- TDD Pattern:
    - start with a failing unit test (red) -> write just enough code to make the test pass (green) -> "make the code good" (blue/refactoring)

^its a choice you can make on when you write your tests, but you dont have the choice to not write the tests

- Tests pass, expresses intent, low duplication (RUG), fewest elements

Don't worry about writing great code
- "Paralysis by Analysis"

"Meaningfully Failing Tests"
- have a unit test/ unit case
- write garbage to get it to work (chatgpt, stack overflow, whatever)
- then refactor it on your own

DRY (dont repeat yourself)
"Moist"
RUG (repeat until good)

Project/Solution/assemblies

Object-Oriented Means a Language Supports:
- Encapsulation - "capsule" - a boundary between something and something